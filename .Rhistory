rf=randomForest::randomForest(y~., data=df[[1]], importance = T)
rf$importance
df = dataset(varnum=100, setting="Correlation", var="no_int", seed=1, main_var=10, var_effect=c(0.5,-0.5), correlation_var=30, correlation_val=1, high_dim=T, train_sample=75)
rf=randomForest::randomForest(y~., data=df[[1]], importance = T)
rf$importance
df = dataset(varnum=100, setting="Correlation", var="no_int", seed=1, main_var=10, var_effect=c(0.5,-0.5), correlation_var=30, correlation_val=1, high_dim=T, train_sample=100)
rf=randomForest::randomForest(y~., data=df[[1]], importance = T)
rf$importance
df = dataset(varnum=100, setting="Correlation", var="no_int", seed=1, main_var=10, var_effect=c(0.5,-0.5), correlation_var=30, correlation_val=1, high_dim=T, train_sample=1000)
rf$importance
rf=randomForest::randomForest(y~., data=df[[1]], importance = T)
rf$importance
df = dataset(varnum=50, setting="Correlation", var="no_int", seed=1, main_var=10, var_effect=c(0.5,-0.5), correlation_var=30, correlation_val=1, high_dim=T, train_sample=50)
rf=randomForest::randomForest(y~., data=df[[1]], importance = T)
rf$importance
df = dataset(varnum=50, setting="Correlation", var="no_int", seed=1, main_var=10, var_effect=c(0.5,-0.5), correlation_var=30, correlation_val=1, high_dim=T, train_sample=50)
rf=randomForest::randomForest(y~., data=df[[1]], importance = T)
rf$importance
devtools::document()
df = dataset(varnum=50, setting="Correlation", var="no_int", seed=1, main_var=10, var_effect=c(0.5,-0.5), correlation_var=30, correlation_val=1, high_dim=T, train_sample=50)
rf=randomForest::randomForest(y~., data=df[[1]], importance = T)
rf$importance
rfimp = rf$importance
str(rfimp)
rfimp = data.frame(rf$importance, variable = rownames(rf$importance), stringsAsFactors = F)
str(rfimp)
varnum=50
df = dataset(varnum=varnum, setting="Correlation", var="no_int", seed=1, main_var=10, var_effect=c(0.5,-0.5), correlation_var=30, correlation_val=1, high_dim=T, train_sample=50)
rf=randomForest::randomForest(y~., data=df[[1]], importance = T)
# rf$importance
rfimp = data.frame(rf$importance, variable = rownames(rf$importance), stringsAsFactors = F)
rfimp$ftype[1:varnum] = "Target"
rfimp$ftype[(varnum+1):nrow(rfimp)] = "Noise"
p <- ggplot2::ggplot(rfimp, aes(x=reorder(variable, IncNodePurity), y=(IncNodePurity)^2)) +
geom_point(aes(shape = Ftype, fill = Ftype))+
coord_flip()
rfimp$ftype
varnum=50; main=10
df = dataset(varnum=varnum, setting="Correlation", var="no_int", seed=1, main_var=main, var_effect=c(0.5,-0.5), correlation_var=30, correlation_val=1, high_dim=T, train_sample=50)
rf=randomForest::randomForest(y~., data=df[[1]], importance = T)
# rf$importance
rfimp = data.frame(rf$importance, variable = rownames(rf$importance), stringsAsFactors = F)
rfimp$ftype[1:main] = "Target"
rfimp$ftype[(main+1):nrow(rfimp)] = "Noise"
p <- ggplot2::ggplot(rfimp, aes(x=reorder(variable, IncNodePurity), y=(IncNodePurity)^2)) +
geom_point(aes(shape = Ftype, fill = Ftype))+
coord_flip()
p <- ggplot2::ggplot(rfimp, aes(x=reorder(variable, IncNodePurity), y=(IncNodePurity)^2)) +
geom_point(aes(shape = Ftype, fill = Ftype))+
coord_flip()
p
p <- ggplot2::ggplot(rfimp, aes(x=reorder(variable, IncNodePurity), y=(IncNodePurity)^2)) +
geom_point(aes(shape = ftype, fill = ftype))+
coord_flip()
p
p <- ggplot2::ggplot(rfimp, aes(x=reorder(variable, IncNodePurity), y=(IncNodePurity)^2)) +
geom_point(aes(shape = ftype, fill = ftype))+
coord_flip()+facet_grid(.~Ftype)+
scale_shape_manual(values = c(0, 21))
p
p <- ggplot2::ggplot(rfimp, aes(x=reorder(variable, IncNodePurity), y=(IncNodePurity)^2)) +
geom_point(aes(shape = ftype, fill = ftype))+
coord_flip()+facet_grid(.~ftype)+
scale_shape_manual(values = c(0, 21))
p
varnum=50; main=10
df = dataset(varnum=varnum, setting="Correlation", var="no_int", seed=1, main_var=main, var_effect=c(0.5,-0.5), correlation_var=30, correlation_val=1, high_dim=T, train_sample=500)
rf=randomForest::randomForest(y~., data=df[[1]], importance = T)
# rf$importance
rfimp = data.frame(rf$importance, variable = rownames(rf$importance), stringsAsFactors = F)
rfimp$ftype[1:main] = "Target"
rfimp$ftype[(main+1):nrow(rfimp)] = "Noise"
p <- ggplot2::ggplot(rfimp, aes(x=reorder(variable, IncNodePurity), y=(IncNodePurity)^2)) +
geom_point(aes(shape = ftype, fill = ftype))+
coord_flip()+facet_grid(.~ftype)+
scale_shape_manual(values = c(0, 21))
p
varnum=500; main=10
df = dataset(varnum=varnum, setting="Correlation", var="no_int", seed=1, main_var=main, var_effect=c(0.5,-0.5), correlation_var=30, correlation_val=1, high_dim=T, train_sample=500)
rf=randomForest::randomForest(y~., data=df[[1]], importance = T)
# rf$importance
rfimp = data.frame(rf$importance, variable = rownames(rf$importance), stringsAsFactors = F)
rfimp$ftype[1:main] = "Target"
rfimp$ftype[(main+1):nrow(rfimp)] = "Noise"
p <- ggplot2::ggplot(rfimp, aes(x=reorder(variable, IncNodePurity), y=(IncNodePurity)^2)) +
geom_point(aes(shape = ftype, fill = ftype))+
coord_flip()+facet_grid(.~ftype)+
scale_shape_manual(values = c(0, 21))
p
varnum=500; main=10
df = dataset(varnum=varnum, setting="Correlation", var="no_int", seed=1, main_var=main, var_effect=c(0.5,-0.5), correlation_var=30, correlation_val=1, high_dim=T, train_sample=100)
rf=randomForest::randomForest(y~., data=df[[1]], importance = T)
# rf$importance
rfimp = data.frame(rf$importance, variable = rownames(rf$importance), stringsAsFactors = F)
rfimp$ftype[1:main] = "Target"
rfimp$ftype[(main+1):nrow(rfimp)] = "Noise"
p <- ggplot2::ggplot(rfimp, aes(x=reorder(variable, IncNodePurity), y=(IncNodePurity)^2)) +
geom_point(aes(shape = ftype, fill = ftype))+
coord_flip()+facet_grid(.~ftype)+
scale_shape_manual(values = c(0, 21))
p
varnum=50; main=10
df = dataset(varnum=varnum, setting="Correlation", var="no_int", seed=1, main_var=main, var_effect=c(0.5,-0.5), correlation_var=30, correlation_val=1, high_dim=T, train_sample=100)
rf=randomForest::randomForest(y~., data=df[[1]], importance = T)
# rf$importance
rfimp = data.frame(rf$importance, variable = rownames(rf$importance), stringsAsFactors = F)
rfimp$ftype[1:main] = "Target"
rfimp$ftype[(main+1):nrow(rfimp)] = "Noise"
p <- ggplot2::ggplot(rfimp, aes(x=reorder(variable, IncNodePurity), y=(IncNodePurity)^2)) +
geom_point(aes(shape = ftype, fill = ftype))+
coord_flip()+facet_grid(.~ftype)+
scale_shape_manual(values = c(0, 21))
p
varnum=100; main=10
df = dataset(varnum=varnum, setting="Correlation", var="no_int", seed=1, main_var=main, var_effect=c(0.5,-0.5), correlation_var=30, correlation_val=1, high_dim=T, train_sample=100)
rf=randomForest::randomForest(y~., data=df[[1]], importance = T)
# rf$importance
rfimp = data.frame(rf$importance, variable = rownames(rf$importance), stringsAsFactors = F)
rfimp$ftype[1:main] = "Target"
rfimp$ftype[(main+1):nrow(rfimp)] = "Noise"
p <- ggplot2::ggplot(rfimp, aes(x=reorder(variable, IncNodePurity), y=(IncNodePurity)^2)) +
geom_point(aes(shape = ftype, fill = ftype))+
coord_flip()+facet_grid(.~ftype)+
scale_shape_manual(values = c(0, 21))
p
varnum=500; main=10
df = dataset(varnum=varnum, setting="Correlation", var="no_int", seed=1, main_var=main, var_effect=c(0.5,-0.5), correlation_var=30, correlation_val=1, high_dim=T, train_sample=100)
rf=randomForest::randomForest(y~., data=df[[1]], importance = T)
# rf$importance
rfimp = data.frame(rf$importance, variable = rownames(rf$importance), stringsAsFactors = F)
rfimp$ftype[1:main] = "Target"
rfimp$ftype[(main+1):nrow(rfimp)] = "Noise"
p <- ggplot2::ggplot(rfimp, aes(x=reorder(variable, IncNodePurity), y=(IncNodePurity)^2)) +
geom_point(aes(shape = ftype, fill = ftype))+
coord_flip()+facet_grid(.~ftype)+
scale_shape_manual(values = c(0, 21))
p
varnum=100; main=10
df = dataset(varnum=varnum, setting="Correlation", var="no_int", seed=1, main_var=main, var_effect=c(0.5,-0.5), correlation_var=30, correlation_val=1, high_dim=T, train_sample=75)
rf=randomForest::randomForest(y~., data=df[[1]], importance = T)
# rf$importance
rfimp = data.frame(rf$importance, variable = rownames(rf$importance), stringsAsFactors = F)
rfimp$ftype[1:main] = "Target"
rfimp$ftype[(main+1):nrow(rfimp)] = "Noise"
p <- ggplot2::ggplot(rfimp, aes(x=reorder(variable, IncNodePurity), y=(IncNodePurity)^2)) +
geom_point(aes(shape = ftype, fill = ftype))+
coord_flip()+facet_grid(.~ftype)+
scale_shape_manual(values = c(0, 21))
p
varnum=500; main=10
df = dataset(varnum=varnum, setting="Correlation", var="no_int", seed=1, main_var=main, var_effect=c(0.5,-0.5), correlation_var=30, correlation_val=1, high_dim=T, train_sample=500)
rf=randomForest::randomForest(y~., data=df[[1]], importance = T)
# rf$importance
rfimp = data.frame(rf$importance, variable = rownames(rf$importance), stringsAsFactors = F)
rfimp$ftype[1:main] = "Target"
rfimp$ftype[(main+1):nrow(rfimp)] = "Noise"
p <- ggplot2::ggplot(rfimp, aes(x=reorder(variable, IncNodePurity), y=(IncNodePurity)^2)) +
geom_point(aes(shape = ftype, fill = ftype))+
coord_flip()+facet_grid(.~ftype)+
scale_shape_manual(values = c(0, 21))
p
varnum=600; main=10
df = dataset(varnum=varnum, setting="Correlation", var="no_int", seed=1, main_var=main, var_effect=c(0.5,-0.5), correlation_var=30, correlation_val=1, high_dim=T, train_sample=500)
rf=randomForest::randomForest(y~., data=df[[1]], importance = T)
# rf$importance
rfimp = data.frame(rf$importance, variable = rownames(rf$importance), stringsAsFactors = F)
rfimp$ftype[1:main] = "Target"
rfimp$ftype[(main+1):nrow(rfimp)] = "Noise"
p <- ggplot2::ggplot(rfimp, aes(x=reorder(variable, IncNodePurity), y=(IncNodePurity)^2)) +
geom_point(aes(shape = ftype, fill = ftype))+
coord_flip()+facet_grid(.~ftype)+
scale_shape_manual(values = c(0, 21))
p
p <- ggplot2::ggplot(rfimp[rfimp$IncNodePurity == min(rfimp$IncNodePurity[rfimp$ftype=="Target"]),], aes(x=reorder(variable, IncNodePurity), y=(IncNodePurity)^2)) +
geom_point(aes(shape = ftype, fill = ftype))+
coord_flip()+facet_grid(.~ftype)+
scale_shape_manual(values = c(0, 21))
p
p <- ggplot2::ggplot(rfimp[rfimp$IncNodePurity >= min(rfimp$IncNodePurity[rfimp$ftype=="Target"]),], aes(x=reorder(variable, IncNodePurity), y=(IncNodePurity)^2)) +
geom_point(aes(shape = ftype, fill = ftype))+
coord_flip()+facet_grid(.~ftype)+
scale_shape_manual(values = c(0, 21))
p
varnum=500; main=10
df = dataset(varnum=varnum, setting="Correlation", var="no_int", seed=1, main_var=main, var_effect=c(0.5,-0.5), correlation_var=30, correlation_val=1, high_dim=T, train_sample=500)
rf=randomForest::randomForest(y~., data=df[[1]], importance = T)
# rf$importance
rfimp = data.frame(rf$importance, variable = rownames(rf$importance), stringsAsFactors = F)
rfimp$ftype[1:main] = "Target"
rfimp$ftype[(main+1):nrow(rfimp)] = "Noise"
p <- ggplot2::ggplot(rfimp[rfimp$IncNodePurity >= min(rfimp$IncNodePurity[rfimp$ftype=="Target"]),], aes(x=reorder(variable, IncNodePurity), y=(IncNodePurity)^2)) +
geom_point(aes(shape = ftype, fill = ftype))+
coord_flip()+facet_grid(.~ftype)+
scale_shape_manual(values = c(0, 21))
p
varnum=1000; main=10
df = dataset(varnum=varnum, setting="Correlation", var="no_int", seed=1, main_var=main, var_effect=c(0.5,-0.5), correlation_var=30, correlation_val=1, high_dim=T, train_sample=500)
rf=randomForest::randomForest(y~., data=df[[1]], importance = T)
# rf$importance
rfimp = data.frame(rf$importance, variable = rownames(rf$importance), stringsAsFactors = F)
rfimp$ftype[1:main] = "Target"
rfimp$ftype[(main+1):nrow(rfimp)] = "Noise"
p <- ggplot2::ggplot(rfimp[rfimp$IncNodePurity >= min(rfimp$IncNodePurity[rfimp$ftype=="Target"]),], aes(x=reorder(variable, IncNodePurity), y=(IncNodePurity)^2)) +
geom_point(aes(shape = ftype, fill = ftype))+
coord_flip()+facet_grid(.~ftype)+
scale_shape_manual(values = c(0, 21))
p
p <- ggplot2::ggplot(rfimp[rfimp$IncNodePurity >= min(rfimp$IncNodePurity[rfimp$ftype=="Target"]),], aes(x=reorder(variable, IncNodePurity), y=asinh(IncNodePurity))) +
geom_point(aes(shape = ftype, fill = ftype))+
coord_flip()+facet_grid(.~ftype)+
scale_shape_manual(values = c(0, 21))
p
rf=randomForest::randomForest(y~., data=df[[1]], importance = T, ntree =1000)
# rf$importance
rfimp = data.frame(rf$importance, variable = rownames(rf$importance), stringsAsFactors = F)
rfimp$ftype[1:main] = "Target"
rfimp$ftype[(main+1):nrow(rfimp)] = "Noise"
p <- ggplot2::ggplot(rfimp[rfimp$IncNodePurity >= min(rfimp$IncNodePurity[rfimp$ftype=="Target"]),], aes(x=reorder(variable, IncNodePurity), y=asinh(IncNodePurity))) +
geom_point(aes(shape = ftype, fill = ftype))+
coord_flip()+facet_grid(.~ftype)+
scale_shape_manual(values = c(0, 21))
p
varnum=20; main=10
df = dataset(varnum=varnum, setting="Correlation", var="no_int", seed=1, main_var=main, var_effect=c(0.5,-0.5), correlation_var=30, correlation_val=1, high_dim=T, train_sample=500)
str(df)
df[[1]][sort(df[[1]]$y),]
varnum=20; main=10
df = dataset(varnum=varnum, setting="Correlation", var="no_int", seed=1, main_var=main, var_effect=c(0.5,-0.5), correlation_var=30, correlation_val=1, high_dim=T, train_sample=50)
df[[1]][order(sort(df[[1]]$y)),]
varnum=7; main=5
df = dataset(varnum=varnum, setting="Correlation", var="no_int", seed=1, main_var=main, var_effect=c(0.5,-0.5), correlation_var=30, correlation_val=1, high_dim=T, train_sample=30)
df[[1]][order(sort(df[[1]]$y)),]
varnum=7; main=5
df = dataset(varnum=varnum, setting="Correlation", var="no_int", seed=1, main_var=main, var_effect=c(0.5,-0.5), correlation_var=0, correlation_val=1, high_dim=T, train_sample=30)
varnum=7; main=7
df = dataset(varnum=varnum, setting="Correlation", var="no_int", seed=1, main_var=main, var_effect=c(0.5,-0.5), correlation_var=0, correlation_val=1, high_dim=T, train_sample=30)
df[[1]][order(sort(df[[1]]$y)),]
df[[1]][reorder(sort(df[[1]]$y)),]
df[[1]]$y
sort(df[[1]]$y)
order(sort(df[[1]]$y))
sort(order(df[[1]]$y))
order(df[[1]]$y)
df = dataset(varnum =25, setting="Correlation", var=c("Mar"), seed=2, high_dim=F, train_sample=500)
HDSI_para = list(model="reg", covariate=c(1), outvar="y", bootstrap=T, effectsize=2, min_max= "min", model_tech ="aridge", interactions=T, int_term=2, intercept=T, out_type="continuous", perf_metric=c("mp_beta"))
## Get optimal hyperparameters
library(future.apply)
plan(multisession(workers =10))
# Hyperparameter optimisation
df = dataset(varnum =25, setting="Correlation", var=c("Mar"), seed=2, high_dim=F, train_sample=500)
devtools::document()
# Hyperparameter optimisation
df = dataset(varnum =25, setting="Correlation", var=c("Mar"), seed=2, high_dim=F, train_sample=500)
str()
str(df)
HDSI_para = list(model="reg", covariate=c(1), outvar="y", bootstrap=T, effectsize=13, min_max= "min", model_tech ="reg", interactions=T, int_term=2, intercept=T, out_type="continuous", perf_metric=c("mp_beta"))
library(future.apply)
plan(multisession(workers =10))
cv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
HDSI_para = list(model="reg", covariate=c(1), outvar="y", bootstrap=T, effectsize=5, min_max= "min", model_tech ="reg", interactions=T, int_term=2, intercept=T, out_type="continuous", perf_metric=c("mp_beta"))
## Get optimal hyperparameters
library(future.apply)
plan(multisession(workers =10))
cv_hyperopt(seeder=1,df=df, sp = HDSI_para)
no_res = HDSI_model=function(model="reg", inputdf=df , seed=1, bootstrap=T, effectsize=5,
k=4,  cint = 0.99, sd_level=-1,para=HDSI_para_control(interactions=T, int_term=2, intercept=T, out_type="continuous", perf_metric=c("mp_beta")), covariate=c(1),  min_max= c("min"))
)
devtools::document()
no_res = HDSI_model(model="reg", inputdf=df , seed=1, bootstrap=T, effectsize=5,
k=4,  cint = 0.8, sd_level=-1,para=HDSI_para_control(interactions=T, int_term=2, intercept=T, out_type="continuous", perf_metric=c("mp_beta")), covariate=c(1),  min_max= c("min"))
no_res$performance
HDSI_para = list(model="reg", covariate=c(1), outvar="y", bootstrap=T, effectsize=5, min_max= "min", model_tech ="reg", interactions=T, int_term=2, intercept=T, out_type="continuous", perf_metric=c("mp_beta"))
## Get optimal hyperparameters
library(future.apply)
plan(multisession(workers =10))
opt_para = cv_hyperopt(seeder=1,df=df, sp = HDSI_para)
no_res = HDSI_model(model="reg", inputdf=df , seed=1, bootstrap=T, effectsize=5,
k=4,  cint = 0.99, sd_level=-1,para=HDSI_para_control(interactions=T, int_term=2, intercept=T, out_type="continuous", perf_metric=c("mp_beta")), covariate=c(1),  min_max= c("min"))
no_res
optres = HDSI_model(model="reg", inputdf=df , seed=1, bootstrap=T, effectsize=5,
k=7,  cint = 0.887, sd_level=1.673,para=HDSI_para_control(interactions=T, int_term=2, intercept=T, out_type="continuous", perf_metric=c("mp_beta")), covariate=c(1),  min_max= c("min"))
optres$performance
df = dataset(varnum =25, setting="Correlation", var=c("Mar"), seed=2, high_dim=F, train_sample=500)
HDSI_para = list(model="reg", covariate=c(1), outvar="y", bootstrap=T, effectsize=5, min_max= "min", model_tech ="reg", interactions=T, int_term=2, intercept=T, out_type="continuous", perf_metric=c("mp_beta"))
library(future.apply)
plan(multisession(workers =10))
opt_para = cv_hyperopt(seeder=1,df=df, sp = HDSI_para)
no_res = HDSI_model(model="reg", inputdf=df , seed=1, bootstrap=T, effectsize=5,
k=4,  cint = 0.99, sd_level=-1,para=HDSI_para_control(interactions=T, int_term=2, intercept=T, out_type="continuous", perf_metric=c("mp_beta")), covariate=c(1),  min_max= c("min"))
no_res$performance
optres = HDSI_model(model="reg", inputdf=df , seed=1, bootstrap=T, effectsize=5,
k=7,  cint = 0.887, sd_level=1.673,para=HDSI_para_control(interactions=T, int_term=2, intercept=T, out_type="continuous", perf_metric=c("mp_beta")), covariate=c(1),  min_max= c("min"))
optres$performance
devtools::document()
# Get the dataset
df = HDSI.DR::data_fit(datatype = c("real"), param = list(miss=31, corr=0.7,data_code=8, cutter = 0, seed =seeder, test_train_ratio=0.2))
df = HDSI.DR::data_fit(datatype = c("real"), param = list(miss=31, corr=0.7,data_code=8, cutter = 0, seed =1, test_train_ratio=0.2))
str(df)
HDSI_para = list(model="reg", covariate=c(1), outvar="y", bootstrap=T, effectsize=13, min_max= "min", model_tech ="reg", interactions=T, int_term=2, intercept=T, out_type="continuous", perf_metric=c("mp_beta"))
library(future.apply)
plan(multisession(workers =10))
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
optres = sHDSI_model(model="reg", inputdf=df , seed=1, bootstrap=T, effectsize=5,
k=7,  cint = 0.887, sd_level=1.673, para=HDSI_para_control(interactions=T, int_term=2, intercept=T, out_type="continuous", perf_metric=c("mp_beta")), covariate=c(1),  min_max= c("min"))
optres
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
optres = sHDSI_model(model="reg", inputdf=df , seed=1, bootstrap=T, effectsize=13,
k=7,  cint = 0.887, sd_level=1.673, para=HDSI_para_control(interactions=T, int_term=2, intercept=T, out_type="continuous", perf_metric=c("mp_beta")), covariate=c(1),  min_max= c("min"))
optres$performance
optres = sHDSI_model(model="lasso", inputdf=df , seed=1, bootstrap=T, effectsize=13,
k=7,  cint = 0.887, sd_level=1.673, para=HDSI_para_control(interactions=T, int_term=2, intercept=T, out_type="continuous", perf_metric=c("mp_beta")), covariate=c(1),  min_max= c("min"))
optres$performance
library(future.apply)
plan(multisession(workers =10))
opt_para = mlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
optres = sHDSI_model(model="reg", inputdf=df , seed=1, bootstrap=T, effectsize=13,
k=9,  cint = 0.85352, sd_level=-0.9824043, para=HDSI_para_control(interactions=T, int_term=2, intercept=T, out_type="continuous", perf_metric=c("mp_beta")), covariate=c(1),  min_max= c("min"))
optres$performance
optres = sHDSI_model(model="lasso", inputdf=df , seed=1, bootstrap=T, effectsize=13,
k=9,  cint = 0.85352, sd_level=-0.9824043, para=HDSI_para_control(interactions=T, int_term=2, intercept=T, out_type="continuous", perf_metric=c("mp_beta")), covariate=c(1),  min_max= c("min"))
optres$performance
optres = HDSI_model(model="reg", inputdf=df , seed=1, bootstrap=T, effectsize=13,
k=9,  cint = 0.85352, sd_level=-0.9824043, para=HDSI_para_control(interactions=T, int_term=2, intercept=T, out_type="continuous", perf_metric=c("mp_beta")), covariate=c(1),  min_max= c("min"))
optres$performance
optres = sHDSI_model(model="reg", inputdf=df , seed=1, bootstrap=T, effectsize=13,
k=9,  cint = 0.85352, sd_level=-0.9824043, para=HDSI_para_control(interactions=T, int_term=2, intercept=T, out_type="continuous", perf_metric=c("mp_beta")), covariate=c(1),  min_max= c("ci"))
optres$performance
optres = sHDSI_model(model="lasso", inputdf=df , seed=1, bootstrap=T, effectsize=13,
k=9,  cint = 0.85352, sd_level=-0.9824043, para=HDSI_para_control(interactions=T, int_term=2, intercept=T, out_type="continuous", perf_metric=c("mp_beta")), covariate=c(1),  min_max= c("ci"))
optres$performance
optres = HDSI_model(model="lasso", inputdf=df , seed=1, bootstrap=T, effectsize=13,
k=9,  cint = 0.85352, sd_level=-0.9824043, para=HDSI_para_control(interactions=T, int_term=2, intercept=T, out_type="continuous", perf_metric=c("mp_beta")), covariate=c(1),  min_max= c("min"))
optres$performance
choose(26,2)
325+25
devtools::document()
# Meth Data Analysis
# Get the dataset
df = HDSI.DR::data_fit(datatype = c("real"), param = list(miss=31, corr=0.7,data_code=8, cutter = 0, seed =1, test_train_ratio=0.2))
## Define the parameters
HDSI_para = list(model="reg", covariate=c(1), outvar="y", bootstrap=T, effectsize=13, min_max= "min", model_tech ="reg", interactions=T, int_term=2, intercept=T, out_type="continuous", perf_metric=c("mp_beta"))
# Get optimal hyperparameters
library(future.apply)
plan(multisession(workers =10))
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
print(smartHDSI_model)
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
print(smartHDSI_model)
devtools::document()
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
devtools::document()
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
future_lapply(1:10, function(x) str(smartHDSI_model))
str(smartHDSI_model)
str(HDSI_model)
future_lapply(1:10, function(x) str(HDSI_model))
lis = c(smartHDSI_model)
future_lapply(1:10, function(x) str(lis))
future_lapply(1:10, function(x) str(lis[1]))
future_lapply(1:10, function(x) str(lis[[1]]))
devtools::document()
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
devtools::document()
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
devtools::document()
devtools::document()
library(future.apply)
plan(multisession(workers =10))
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
library(future.apply)
plan(multisession(workers =10))
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
library(future.apply)
plan(multisession(workers =10))
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
library(future.apply)
plan(multisession(workers =10))
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
library(future.apply)
plan(multisession(workers =10))
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
library(future.apply)
plan(multisession(workers =10))
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
library(future.apply)
plan(multisession(workers =10))
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
library(future.apply)
plan(multisession(workers =10))
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
library(future.apply)
plan(multisession(workers =10))
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
library(future.apply)
plan(multisession(workers =10))
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
library(future.apply)
plan(multisession(workers =10))
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
devtools::document()
library(future.apply)
plan(multisession(workers =10))
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
library(future.apply)
plan(multisession(workers =10))
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
library(future.apply)
plan(multisession(workers =10))
opt_para = smlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
devtools::document()
devtools::document()
## Create a dataset
df = dataset(varnum =25, setting="Correlation", var=c("Mar"), seed=2, high_dim=F, train_sample=500)
## Define the parameters
HDSI_para = list(model="reg", covariate=c(1), outvar="y", bootstrap=T, effectsize=5, min_max= "min", model_tech ="reg", interactions=T, int_term=2, intercept=T, out_type="continuous", perf_metric=c("mp_beta"))
opt_para = cv_hyperopt(seeder=1,df=df, sp = HDSI_para)
## Create a dataset
df = dataset(varnum =25, setting="Correlation", var=c("Mar"), seed=2, high_dim=F, train_sample=500)
## Define the parameters
HDSI_para = list(model="reg", covariate=c(1), outvar="y", bootstrap=T, effectsize=5, min_max= "min", model_tech ="reg", interactions=T, int_term=2, intercept=T, out_type="continuous", perf_metric=c("mp_beta"))
devtools::document()
opt_para = cv_hyperopt(seeder=1,df=df, sp = HDSI_para)
devtools::document()
opt_para = mlcv_hyperopt(seeder=1,df=df, sp = HDSI_para)
opt_para
opt_para[1]
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
p_est(p=118, k=10, effectsize = "large")
p_est(p=118, k=10, effectsize = "small")
p_est(p=118, k=50, effectsize = "small")
p_est(p=118, k=60, effectsize = "small")
choose(118,2)
choose(60,2)
p_est(p=118, k=59, effectsize = "small")
choose(69,2)
choose(59,2)
choose(118,2)+118
sqrt(choose(118,2)+118)
log(choose(118,2)+118)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
